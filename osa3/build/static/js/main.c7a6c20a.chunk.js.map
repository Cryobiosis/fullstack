{"version":3,"sources":["components/Persons.js","components/PersonForm.js","components/Filter.js","components/Notification.js","services/PersonService.js","App.js","serviceWorker.js","index.js"],"names":["Person","person","deleteCallback","name","number","onClick","Persons","props","persons","map","i","key","PersonForm","onSubmit","type","value","onChange","nameOnChange","numberOnChange","Filter","callback","Notification","message","className","baseUrl","axios","get","then","response","data","newObject","post","id","put","delete","App","useState","useFilter","setFilter","setPersons","newName","setNewName","newNumber","setNewNumber","infoMessage","setInfoMessage","errorMessage","setErrorMessage","useEffect","personService","personsInit","personsToShow","filter","includes","event","target","preventDefault","tmp","length","window","confirm","numObject","returnedPerson","concat","setTimeout","catch","error","date","Date","toISOString","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","console"],"mappings":"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","file":"static/js/main.c7a6c20a.chunk.js","sourcesContent":["import React from 'react'\n\nconst Person = ({person, deleteCallback}) => {\n    return (\n        <li>\n            {person.name} {person.number} \n            <button onClick={() => deleteCallback(person)}>delete</button>\n        </li>\n    )\n}\n\nconst Persons = (props) => {\n    return (\n        <div>\n            <ul>\n            {props.persons.map((person, i) => \n                <Person key={person.name} person={person} deleteCallback={props.deleteCallback} />\n            )}\n            </ul>\n        </div>\n        )\n}\n\nexport default Persons","import React from 'react'\n\nconst PersonForm = (props) => {\n    return (\n        <form onSubmit={props.onSubmit}>\n        <div>\n          name:\n          <input type=\"text\" name=\"name\" value={props.name} onChange={props.nameOnChange}/>\n        </div>\n        <div>\n          number:\n          <input type=\"text\" name=\"number\" value={props.number} onChange={props.numberOnChange}/>\n        </div>\n        <div>\n          <button type=\"submit\">add</button>\n        </div>\n      </form>\n      )\n}\n\nexport default PersonForm","import React, { useState } from 'react'\n\nconst Filter = (props) => {\n    return (\n        <div>\n            Filter shown with\n            <input type=\"text\" name=\"filter\" value={props.value} onChange={props.callback}/>\n        </div>\n    )\n}\n\nexport default Filter","import React from 'react'\n\nconst Notification = ({ message, type }) => {\n    if (message === null) {\n      return null\n    }\n  \n    return (\n      <div className={type}>\n        {message}\n      </div>\n    )\n  }\n\n  export default Notification","import axios from 'axios'\n// const baseUrl = 'http://localhost:3001/api/persons'\n// const baseUrl = 'https://aqueous-spire-49391.herokuapp.com/api/persons'\nconst baseUrl = '/api/persons'\n\nconst getAll = () => {\n  const request = axios.get(baseUrl)\n  return request.then(response => response.data)\n}\n\nconst create = newObject => {\n  const request = axios.post(baseUrl, newObject)\n  return request.then(response => response.data)\n}\n\nconst deletePerson = id => {\n  const request = axios.delete(baseUrl+\"/\"+id)\n  return request.then(response => response.data)\n}\n\nconst update = (id, newObject) => {\n  const request = axios.put(`${baseUrl}/${id}`, newObject)\n  return request.then(response => response.data)\n}\n\nexport default { getAll, create, update, deletePerson }","import React, { useState, useEffect } from 'react'\nimport Persons        from './components/Persons'\nimport PersonForm     from './components/PersonForm'\nimport Filter         from './components/Filter'\nimport Notification   from './components/Notification'\nimport personService  from './services/PersonService'\n\nimport './index.css'\n\nconst App = () => {\n\n  const [ useFilter, setFilter ]    = useState('')\n  const handleFilterChange = (event) => {\n      setFilter(event.target.value)\n  }\n  const handleNameChange = (event) => {\n    setNewName(event.target.value)\n  }\n  const handleNumChange = (event) => {\n    setNewNumber(event.target.value)\n  }\n  const [persons, setPersons]           = useState([])\n  const [newName, setNewName]           = useState('')\n  const [newNumber, setNewNumber]       = useState('')\n  const [infoMessage, setInfoMessage]   = useState(null)\n  const [errorMessage, setErrorMessage] = useState(null)\n\n  // Get all persons, get only in first render thus [] as second arg.\n  useEffect(() => {\n    personService\n      .getAll()\n      .then(personsInit => {\n          setPersons(personsInit)\n      })\n  }, [])\n\n  // Add number\n  const addNum = (event) => {\n    event.preventDefault()\n   \n    // Use filter to search person by name\n    const filter = persons.filter(tmp => tmp.name === newName)\n    // Get person object from array\n    let person\n    if (filter.length > 0) person = filter[0]\n\n    // If name is already in phonebook then update\n    if (person) {\n      // NOTE: Really this check should be on done on server\n      if (window.confirm(`${newName} is already added to phonebook, replace old number with new one?`)) {\n        const numObject = {...person, number: newNumber}\n        personService\n          .update(person.id, numObject)\n          .then(returnedPerson => {\n            // Remove old one and add new in local array\n            setPersons(persons\n                        .filter(tmp => tmp.id !== person.id)\n                        .concat(returnedPerson))\n\n            setInfoMessage(`Updated ${newName}`)\n            setTimeout(() => {\n              setInfoMessage(null)\n            }, 5000)\n        }).catch(error => {\n          setErrorMessage(`the person '${person.name}' can't be updated. Error: ${error.response.data.error}`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000) \n        })\n      } \n    } else {\n      const numObject = {\n        name:   newName,\n        number: newNumber,\n        date:   new Date().toISOString(),\n        // id: persons.length + 1,\n      }\n      // Create new object with POST\n      personService\n        .create(numObject)\n        .then(returnedPerson => {\n          setPersons(persons.concat(returnedPerson))\n          setInfoMessage(`Added ${newName}`)\n          setTimeout(() => {\n            setInfoMessage(null)\n          }, 5000) \n      }).catch(error => {\n        setErrorMessage(`the person '${numObject.name}' can't be created. Error: ${error.response.data.error}`)\n        setTimeout(() => {\n          setErrorMessage(null)\n        }, 5000) \n      })\n    }\n    // Reset always user input fields\n    setNewName('')\n    setNewNumber('')\n  }\n\n  // Delete person from server and update GUI\n  const deleteCallback = (person) => {\n    \n    if (window.confirm(`Delete ${person.name} ?`)) { \n      personService\n        .deletePerson(person.id)\n        .then(returnedPerson => {\n          setPersons(persons.filter(tmp => tmp.id !== person.id))\n          //console.log(persons.filter(person => person.id !== id))\n          setInfoMessage(`Removed ${person.name}`)\n          setTimeout(() => {\n            setInfoMessage(null)\n          }, 5000)\n  \n        })\n        .catch(error => {\n          setErrorMessage(`the person '${person.name}' was already deleted from server`)\n          setTimeout(() => {\n            setErrorMessage(null)\n          }, 5000) \n        })\n    }\n  }\n\n  // Use filter to limit persons\n  const personsToShow = useFilter ? persons.filter(person => person.name.includes(useFilter)) : persons\n\n  return (\n    <div>\n      <h2>Phonebook</h2>\n\n      <Notification message={infoMessage}  type='info'/>\n      <Notification message={errorMessage} type='error'/>\n\n      <Filter name={useFilter} callback={handleFilterChange} />\n\n      <h3>Add a new</h3>\n      <PersonForm \n        onSubmit      = {addNum} \n        name          = {newName}\n        nameOnChange  = {handleNameChange} \n        number        = {newNumber} \n        numberOnChange= {handleNumChange}\n      />\n\n      <h3>Numbers</h3>\n      <Persons \n        persons       = {personsToShow}\n        deleteCallback= {deleteCallback}\n        />\n\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}